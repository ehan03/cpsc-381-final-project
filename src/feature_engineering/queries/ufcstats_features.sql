-- Reach, height, and elevation features
WITH elevations_raw AS (
  SELECT 
    *, 
    ROW_NUMBER() OVER(
      PARTITION BY FIGHTER_ID 
      ORDER BY 
        DATE, 
        EVENT_ID, 
        BOUT_ORDINAL
    ) AS FIGHTER_BOUT_NUMBER 
  FROM 
    (
      SELECT 
        t1.BOUT_ID, 
        t1.EVENT_ID, 
        t1.DATE, 
        t1.BOUT_ORDINAL, 
        t1.RED_FIGHTER_ID AS FIGHTER_ID, 
        t2.ELEVATION_METERS 
      FROM 
        main.UFCSTATS_BOUTS_OVERALL AS t1 
        INNER JOIN main.LOCATION_ELEVATIONS AS t2 ON t1.LOCATION = t2.LOCATION 
      UNION ALL 
      SELECT 
        t1.BOUT_ID, 
        t1.EVENT_ID, 
        t1.DATE, 
        t1.BOUT_ORDINAL, 
        t1.BLUE_FIGHTER_ID AS FIGHTER_ID, 
        t2.ELEVATION_METERS 
      FROM 
        main.UFCSTATS_BOUTS_OVERALL AS t1 
        INNER JOIN main.LOCATION_ELEVATIONS AS t2 ON t1.LOCATION = t2.LOCATION
    )
), 
elevation_features AS (
  SELECT 
    BOUT_ID, 
    FIGHTER_ID, 
    FIGHTER_BOUT_NUMBER, 
    AVG(ELEVATION_METERS) OVER(
      PARTITION BY FIGHTER_ID 
      ORDER BY 
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING 
        AND 1 PRECEDING
    ) AS ELEVATION_METERS_AVERAGE, 
    MAX(ELEVATION_METERS) OVER(
      PARTITION BY FIGHTER_ID 
      ORDER BY 
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING 
        AND 1 PRECEDING
    ) AS ELEVATION_METERS_MAX 
  FROM 
    elevations_raw
) 
SELECT 
  t1.BOUT_ID, 
  t1.EVENT_ID, 
  t1.DATE, 
  t1.BOUT_ORDINAL, 
  CASE WHEN t2.REACH_INCHES - t3.REACH_INCHES IS NULL THEN 0 ELSE t2.REACH_INCHES - t3.REACH_INCHES END AS UFCSTATS_REACH_INCHES_DIFF, 
  CASE WHEN CAST(t2.REACH_INCHES AS FLOAT) / t3.REACH_INCHES IS NULL THEN 1 ELSE CAST(t2.REACH_INCHES AS FLOAT) / t3.REACH_INCHES END AS UFCSTATS_REACH_INCHES_RATIO, 
  t4.ELEVATION_METERS_AVERAGE - t5.ELEVATION_METERS_AVERAGE AS UFCSTATS_ELEVATION_METERS_AVERAGE_DIFF, 
  CAST(t4.ELEVATION_METERS_MAX AS FLOAT) / t5.ELEVATION_METERS_MAX AS UFCSTATS_ELEVATION_METERS_MAX_RATIO, 
  CASE t1.RED_OUTCOME WHEN 'W' THEN 1 WHEN 'L' THEN 0 ELSE NULL END AS RED_WIN 
FROM 
  main.UFCSTATS_BOUTS_OVERALL AS t1 
  INNER JOIN main.UFCSTATS_FIGHTERS AS t2 ON t1.RED_FIGHTER_ID = t2.FIGHTER_ID 
  INNER JOIN main.UFCSTATS_FIGHTERS AS t3 ON t1.BLUE_FIGHTER_ID = t3.FIGHTER_ID 
  INNER JOIN elevation_features AS t4 ON t1.BOUT_ID = t4.BOUT_ID 
  AND t1.RED_FIGHTER_ID = t4.FIGHTER_ID 
  INNER JOIN elevation_features AS t5 ON t1.BOUT_ID = t5.BOUT_ID 
  AND t1.BLUE_FIGHTER_ID = t5.FIGHTER_ID 
WHERE 
  t4.FIGHTER_BOUT_NUMBER > 1 
  AND t5.FIGHTER_BOUT_NUMBER > 1 
  AND t1.DATE > ? 
ORDER BY 
  t1.DATE, 
  t1.EVENT_ID, 
  t1.BOUT_ORDINAL;


-- Striking and grappling features
WITH bout_stats_agg AS (
  SELECT
    BOUT_ID,
    SUM(RED_KNOCKDOWNS) AS RED_KNOCKDOWNS,
    SUM(BLUE_KNOCKDOWNS) AS BLUE_KNOCKDOWNS,
    SUM(RED_TOTAL_STRIKES_LANDED) AS RED_TOTAL_STRIKES_LANDED,
    SUM(RED_TOTAL_STRIKES_ATTEMPTED) AS RED_TOTAL_STRIKES_ATTEMPTED,
    SUM(BLUE_TOTAL_STRIKES_LANDED) AS BLUE_TOTAL_STRIKES_LANDED,
    SUM(BLUE_TOTAL_STRIKES_ATTEMPTED) AS BLUE_TOTAL_STRIKES_ATTEMPTED,
    SUM(RED_TAKEDOWNS_LANDED) AS RED_TAKEDOWNS_LANDED,
    SUM(RED_TAKEDOWNS_ATTEMPTED) AS RED_TAKEDOWNS_ATTEMPTED,
    SUM(BLUE_TAKEDOWNS_LANDED) AS BLUE_TAKEDOWNS_LANDED,
    SUM(BLUE_TAKEDOWNS_ATTEMPTED) AS BLUE_TAKEDOWNS_ATTEMPTED,
    SUM(RED_SUBMISSION_ATTEMPTS) AS RED_SUBMISSION_ATTEMPTS,
    SUM(BLUE_SUBMISSION_ATTEMPTS) AS BLUE_SUBMISSION_ATTEMPTS,
    SUM(RED_REVERSALS) AS RED_REVERSALS,
    SUM(BLUE_REVERSALS) AS BLUE_REVERSALS,
    SUM(RED_CONTROL_TIME_SECONDS) AS RED_CONTROL_TIME_SECONDS,
    SUM(BLUE_CONTROL_TIME_SECONDS) AS BLUE_CONTROL_TIME_SECONDS,
    SUM(RED_SIGNIFICANT_STRIKES_LANDED) AS RED_SIGNIFICANT_STRIKES_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_LANDED) AS BLUE_SIGNIFICANT_STRIKES_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_ATTEMPTED,
    SUM(RED_SIGNIFICANT_STRIKES_HEAD_LANDED) AS RED_SIGNIFICANT_STRIKES_HEAD_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_HEAD_LANDED) AS BLUE_SIGNIFICANT_STRIKES_HEAD_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
    SUM(RED_SIGNIFICANT_STRIKES_BODY_LANDED) AS RED_SIGNIFICANT_STRIKES_BODY_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_BODY_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_BODY_LANDED) AS BLUE_SIGNIFICANT_STRIKES_BODY_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_BODY_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
    SUM(RED_SIGNIFICANT_STRIKES_LEG_LANDED) AS RED_SIGNIFICANT_STRIKES_LEG_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_LEG_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_LEG_LANDED) AS BLUE_SIGNIFICANT_STRIKES_LEG_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_LEG_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
    SUM(RED_SIGNIFICANT_STRIKES_DISTANCE_LANDED) AS RED_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_DISTANCE_LANDED) AS BLUE_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
    SUM(RED_SIGNIFICANT_STRIKES_CLINCH_LANDED) AS RED_SIGNIFICANT_STRIKES_CLINCH_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_CLINCH_LANDED) AS BLUE_SIGNIFICANT_STRIKES_CLINCH_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
    SUM(RED_SIGNIFICANT_STRIKES_GROUND_LANDED) AS RED_SIGNIFICANT_STRIKES_GROUND_LANDED,
    SUM(RED_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED) AS RED_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED,
    SUM(BLUE_SIGNIFICANT_STRIKES_GROUND_LANDED) AS BLUE_SIGNIFICANT_STRIKES_GROUND_LANDED,
    SUM(BLUE_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED) AS BLUE_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
  FROM
    main.UFCSTATS_BOUTS_BY_ROUND
  GROUP BY
    BOUT_ID
),
bout_info_with_agg_stats AS (
  SELECT
    t1.EVENT_ID,
    t1.DATE,
    t1.BOUT_ORDINAL,
    t1.TOTAL_TIME_SECONDS,
    t1.RED_FIGHTER_ID,
    t1.BLUE_FIGHTER_ID,
    t1.RED_OUTCOME,
    t1.BLUE_OUTCOME,
    CASE t1.RED_OUTCOME WHEN 'W' THEN t1.BOUT_PERF_BONUS ELSE 0 END AS RED_PERF_BONUS,
    CASE t1.BLUE_OUTCOME WHEN 'W' THEN t1.BOUT_PERF_BONUS ELSE 0 END AS BLUE_PERF_BONUS,
    t2.*
  FROM
    main.UFCSTATS_BOUTS_OVERALL AS t1
    LEFT JOIN bout_stats_agg AS t2 ON t1.BOUT_ID = t2.BOUT_ID
),
stacked_bout_stats_raw AS (
  SELECT
    *,
    ROW_NUMBER() OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        DATE,
        EVENT_ID,
        BOUT_ORDINAL
    ) AS FIGHTER_BOUT_NUMBER
  FROM
    (
      SELECT
        BOUT_ID,
        EVENT_ID,
        DATE,
        BOUT_ORDINAL,
        RED_FIGHTER_ID AS FIGHTER_ID,
        CASE RED_OUTCOME WHEN 'W' THEN 1 ELSE 0 END AS FIGHTER_WIN,
        TOTAL_TIME_SECONDS,
        RED_PERF_BONUS AS FIGHTER_PERF_BONUS,
        RED_KNOCKDOWNS AS FIGHTER_KNOCKDOWNS,
        RED_TOTAL_STRIKES_LANDED AS FIGHTER_TOTAL_STRIKES_LANDED,
        RED_TOTAL_STRIKES_ATTEMPTED AS FIGHTER_TOTAL_STRIKES_ATTEMPTED,
        RED_TAKEDOWNS_LANDED AS FIGHTER_TAKEDOWNS_LANDED,
        RED_TAKEDOWNS_ATTEMPTED AS FIGHTER_TAKEDOWNS_ATTEMPTED,
        RED_SUBMISSION_ATTEMPTS AS FIGHTER_SUBMISSION_ATTEMPTS,
        RED_REVERSALS AS FIGHTER_REVERSALS,
        RED_CONTROL_TIME_SECONDS AS FIGHTER_CONTROL_TIME_SECONDS,
        RED_SIGNIFICANT_STRIKES_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_LANDED,
        RED_SIGNIFICANT_STRIKES_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_HEAD_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED,
        RED_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_BODY_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED,
        RED_SIGNIFICANT_STRIKES_BODY_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_LEG_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED,
        RED_SIGNIFICANT_STRIKES_LEG_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
        RED_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED,
        RED_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_GROUND_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED,
        RED_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED,
        BLUE_KNOCKDOWNS AS OPPONENT_KNOCKDOWNS,
        BLUE_TOTAL_STRIKES_LANDED AS OPPONENT_TOTAL_STRIKES_LANDED,
        BLUE_TOTAL_STRIKES_ATTEMPTED AS OPPONENT_TOTAL_STRIKES_ATTEMPTED,
        BLUE_TAKEDOWNS_LANDED AS OPPONENT_TAKEDOWNS_LANDED,
        BLUE_TAKEDOWNS_ATTEMPTED AS OPPONENT_TAKEDOWNS_ATTEMPTED,
        BLUE_SUBMISSION_ATTEMPTS AS OPPONENT_SUBMISSION_ATTEMPTS,
        BLUE_REVERSALS AS OPPONENT_REVERSALS,
        BLUE_CONTROL_TIME_SECONDS AS OPPONENT_CONTROL_TIME_SECONDS,
        BLUE_SIGNIFICANT_STRIKES_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_LANDED,
        BLUE_SIGNIFICANT_STRIKES_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_HEAD_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED,
        BLUE_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_BODY_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED,
        BLUE_SIGNIFICANT_STRIKES_BODY_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_LEG_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED,
        BLUE_SIGNIFICANT_STRIKES_LEG_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
        BLUE_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_CLINCH_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED,
        BLUE_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_GROUND_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED,
        BLUE_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
      FROM
        bout_info_with_agg_stats
      UNION ALL
      SELECT
        BOUT_ID,
        EVENT_ID,
        DATE,
        BOUT_ORDINAL,
        BLUE_FIGHTER_ID AS FIGHTER_ID,
        CASE BLUE_OUTCOME WHEN 'W' THEN 1 ELSE 0 END AS FIGHTER_WIN,
        TOTAL_TIME_SECONDS,
        BLUE_PERF_BONUS AS FIGHTER_PERF_BONUS,
        BLUE_KNOCKDOWNS AS FIGHTER_KNOCKDOWNS,
        BLUE_TOTAL_STRIKES_LANDED AS FIGHTER_TOTAL_STRIKES_LANDED,
        BLUE_TOTAL_STRIKES_ATTEMPTED AS FIGHTER_TOTAL_STRIKES_ATTEMPTED,
        BLUE_TAKEDOWNS_LANDED AS FIGHTER_TAKEDOWNS_LANDED,
        BLUE_TAKEDOWNS_ATTEMPTED AS FIGHTER_TAKEDOWNS_ATTEMPTED,
        BLUE_SUBMISSION_ATTEMPTS AS FIGHTER_SUBMISSION_ATTEMPTS,
        BLUE_REVERSALS AS FIGHTER_REVERSALS,
        BLUE_CONTROL_TIME_SECONDS AS FIGHTER_CONTROL_TIME_SECONDS,
        BLUE_SIGNIFICANT_STRIKES_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_LANDED,
        BLUE_SIGNIFICANT_STRIKES_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_HEAD_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED,
        BLUE_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_BODY_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED,
        BLUE_SIGNIFICANT_STRIKES_BODY_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_LEG_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED,
        BLUE_SIGNIFICANT_STRIKES_LEG_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
        BLUE_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED,
        BLUE_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
        BLUE_SIGNIFICANT_STRIKES_GROUND_LANDED AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED,
        BLUE_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED,
        RED_KNOCKDOWNS AS OPPONENT_KNOCKDOWNS,
        RED_TOTAL_STRIKES_LANDED AS OPPONENT_TOTAL_STRIKES_LANDED,
        RED_TOTAL_STRIKES_ATTEMPTED AS OPPONENT_TOTAL_STRIKES_ATTEMPTED,
        RED_TAKEDOWNS_LANDED AS OPPONENT_TAKEDOWNS_LANDED,
        RED_TAKEDOWNS_ATTEMPTED AS OPPONENT_TAKEDOWNS_ATTEMPTED,
        RED_SUBMISSION_ATTEMPTS AS OPPONENT_SUBMISSION_ATTEMPTS,
        RED_REVERSALS AS OPPONENT_REVERSALS,
        RED_CONTROL_TIME_SECONDS AS OPPONENT_CONTROL_TIME_SECONDS,
        RED_SIGNIFICANT_STRIKES_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_LANDED,
        RED_SIGNIFICANT_STRIKES_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_HEAD_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED,
        RED_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_BODY_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED,
        RED_SIGNIFICANT_STRIKES_BODY_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_LEG_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED,
        RED_SIGNIFICANT_STRIKES_LEG_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
        RED_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_CLINCH_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED,
        RED_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
        RED_SIGNIFICANT_STRIKES_GROUND_LANDED AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED,
        RED_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
      FROM
        bout_info_with_agg_stats
    )
),
stacked_bout_stats_agg_lags AS (
  SELECT
    BOUT_ID,
    FIGHTER_ID,
    FIGHTER_BOUT_NUMBER,
    AVG(FIGHTER_WIN) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_WIN_RATE,
    SUM(TOTAL_TIME_SECONDS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS TOTAL_TIME_SECONDS,
    SUM(FIGHTER_PERF_BONUS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_PERF_BONUSES,
    SUM(FIGHTER_KNOCKDOWNS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_KNOCKDOWNS,
    SUM(FIGHTER_TOTAL_STRIKES_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_TOTAL_STRIKES_LANDED,
    SUM(FIGHTER_TOTAL_STRIKES_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_TOTAL_STRIKES_ATTEMPTED,
    SUM(FIGHTER_TAKEDOWNS_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_TAKEDOWNS_LANDED,
    SUM(FIGHTER_TAKEDOWNS_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_TAKEDOWNS_ATTEMPTED,
    SUM(FIGHTER_SUBMISSION_ATTEMPTS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SUBMISSION_ATTEMPTS,
    SUM(FIGHTER_REVERSALS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_REVERSALS,
    SUM(FIGHTER_CONTROL_TIME_SECONDS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_CONTROL_TIME_SECONDS,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_ATTEMPTED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_BODY_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_LEG_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED,
    SUM(FIGHTER_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED,
    SUM(OPPONENT_KNOCKDOWNS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_KNOCKDOWNS,
    SUM(OPPONENT_TOTAL_STRIKES_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_TOTAL_STRIKES_LANDED,
    SUM(OPPONENT_TOTAL_STRIKES_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_TOTAL_STRIKES_ATTEMPTED,
    SUM(OPPONENT_TAKEDOWNS_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_TAKEDOWNS_LANDED,
    SUM(OPPONENT_TAKEDOWNS_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_TAKEDOWNS_ATTEMPTED,
    SUM(OPPONENT_SUBMISSION_ATTEMPTS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SUBMISSION_ATTEMPTS,
    SUM(OPPONENT_REVERSALS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_REVERSALS,
    SUM(OPPONENT_CONTROL_TIME_SECONDS) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_CONTROL_TIME_SECONDS,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_ATTEMPTED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_BODY_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_BODY_ATTEMPTED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_LEG_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_LEG_ATTEMPTED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED,
    SUM(OPPONENT_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED) OVER(
      PARTITION BY FIGHTER_ID
      ORDER BY
        FIGHTER_BOUT_NUMBER ROWS BETWEEN UNBOUNDED PRECEDING
        AND 1 PRECEDING
    ) AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
  FROM
    stacked_bout_stats_raw
),
stacked_derived_features AS (
  SELECT
    *,
    CASE FIGHTER_TOTAL_STRIKES_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_TOTAL_STRIKES_LANDED AS FLOAT) / FIGHTER_TOTAL_STRIKES_ATTEMPTED
    END AS FIGHTER_TOTAL_STRIKES_ACCURACY,
    CAST(FIGHTER_TOTAL_STRIKES_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_TOTAL_STRIKES_LANDED_PER_MIN,
    CASE FIGHTER_TAKEDOWNS_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_TAKEDOWNS_LANDED AS FLOAT) / FIGHTER_TAKEDOWNS_ATTEMPTED
    END AS FIGHTER_TAKEDOWNS_ACCURACY,
    CAST(FIGHTER_TAKEDOWNS_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_TAKEDOWNS_LANDED_PER_MIN,
    CAST(FIGHTER_SUBMISSION_ATTEMPTS AS FLOAT) / (15.0 * TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SUBMISSION_ATTEMPTS_PER_15_MIN,
    CAST(FIGHTER_CONTROL_TIME_SECONDS AS FLOAT) / TOTAL_TIME_SECONDS AS FIGHTER_CONTROL_TIME_PROPORTION,
    CASE FIGHTER_SIGNIFICANT_STRIKES_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_HEAD_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LANDED
    END AS FIGHTER_SIGNIFICANT_STRIKES_HEAD_PROPORTION,
    CASE FIGHTER_SIGNIFICANT_STRIKES_BODY_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_BODY_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_BODY_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_BODY_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LANDED
    END AS FIGHTER_SIGNIFICANT_STRIKES_BODY_PROPORTION,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LEG_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LEG_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_LEG_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_LEG_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LANDED
    END AS FIGHTER_SIGNIFICANT_STRIKES_LEG_PROPORTION,
    CASE FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LANDED
    END AS FIGHTER_SIGNIFICANT_STRIKES_DISTANCE_PROPORTION,
    CASE FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LANDED
    END AS FIGHTER_SIGNIFICANT_STRIKES_CLINCH_PROPORTION,
    CASE FIGHTER_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
    END AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_ACCURACY,
    CAST(FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED_PER_MIN,
    CASE FIGHTER_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(FIGHTER_SIGNIFICANT_STRIKES_GROUND_LANDED AS FLOAT) / FIGHTER_SIGNIFICANT_STRIKES_LANDED
    END AS FIGHTER_SIGNIFICANT_STRIKES_GROUND_PROPORTION,
    CASE OPPONENT_TOTAL_STRIKES_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_TOTAL_STRIKES_LANDED AS FLOAT) / OPPONENT_TOTAL_STRIKES_ATTEMPTED
    END AS OPPONENT_TOTAL_STRIKES_ACCURACY,
    CAST(OPPONENT_TOTAL_STRIKES_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_TOTAL_STRIKES_LANDED_PER_MIN,
    CASE OPPONENT_TAKEDOWNS_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_TAKEDOWNS_LANDED AS FLOAT) / OPPONENT_TAKEDOWNS_ATTEMPTED
    END AS OPPONENT_TAKEDOWNS_ACCURACY,
    CAST(OPPONENT_TAKEDOWNS_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_TAKEDOWNS_LANDED_PER_MIN,
    CAST(OPPONENT_SUBMISSION_ATTEMPTS AS FLOAT) / (15.0 * TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SUBMISSION_ATTEMPTS_PER_15_MIN,
    CAST(OPPONENT_CONTROL_TIME_SECONDS AS FLOAT) / TOTAL_TIME_SECONDS AS OPPONENT_CONTROL_TIME_PROPORTION,
    CASE OPPONENT_SIGNIFICANT_STRIKES_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_HEAD_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_HEAD_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LANDED
    END AS OPPONENT_SIGNIFICANT_STRIKES_HEAD_PROPORTION,
    CASE OPPONENT_SIGNIFICANT_STRIKES_BODY_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_BODY_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_BODY_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_BODY_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LANDED
    END AS OPPONENT_SIGNIFICANT_STRIKES_BODY_PROPORTION,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LEG_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LEG_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_LEG_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LANDED
    END AS OPPONENT_SIGNIFICANT_STRIKES_LEG_PROPORTION,
    CASE OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LANDED
    END AS OPPONENT_SIGNIFICANT_STRIKES_DISTANCE_PROPORTION,
    CASE OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_CLINCH_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LANDED
    END AS OPPONENT_SIGNIFICANT_STRIKES_CLINCH_PROPORTION,
    CASE OPPONENT_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_GROUND_ATTEMPTED
    END AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_ACCURACY,
    CAST(OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED AS FLOAT) / (TOTAL_TIME_SECONDS / 60.0) AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED_PER_MIN,
    CASE OPPONENT_SIGNIFICANT_STRIKES_LANDED
      WHEN 0 THEN 0
      ELSE CAST(OPPONENT_SIGNIFICANT_STRIKES_GROUND_LANDED AS FLOAT) / OPPONENT_SIGNIFICANT_STRIKES_LANDED
    END AS OPPONENT_SIGNIFICANT_STRIKES_GROUND_PROPORTION
  FROM
    stacked_bout_stats_agg_lags
)
SELECT
  t1.BOUT_ID,
  t1.EVENT_ID, 
  t1.DATE, 
  t1.BOUT_ORDINAL, 
  t2.FIGHTER_PERF_BONUSES - t3.FIGHTER_PERF_BONUSES AS UFCSTATS_PERF_BONUSES_DIFF,
  SQRT(t2.FIGHTER_SIGNIFICANT_STRIKES_ACCURACY * t3.OPPONENT_SIGNIFICANT_STRIKES_ACCURACY) - SQRT(t3.FIGHTER_SIGNIFICANT_STRIKES_ACCURACY * t2.OPPONENT_SIGNIFICANT_STRIKES_ACCURACY) AS UFCSTATS_SIGNIFICANT_STRIKES_EXPECTED_ACCURACY_DIFF,
  t2.OPPONENT_SIGNIFICANT_STRIKES_LANDED_PER_MIN - t3.OPPONENT_SIGNIFICANT_STRIKES_LANDED_PER_MIN AS UFCSTATS_OPPONENT_SIGNIFICANT_STRIKES_LANDED_PER_MIN_DIFF,
  t2.OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED_PER_MIN - t3.OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED_PER_MIN AS UFCSTATS_OPPONENT_SIGNIFICANT_STRIKES_LEG_LANDED_PER_MIN_DIFF,
  (CAST(t2.FIGHTER_CONTROL_TIME_SECONDS AS FLOAT) / (t2.FIGHTER_KNOCKDOWNS + t2.FIGHTER_TAKEDOWNS_LANDED + t2.FIGHTER_REVERSALS + 1)) - (CAST(t3.FIGHTER_CONTROL_TIME_SECONDS AS FLOAT) / (t3.FIGHTER_KNOCKDOWNS + t3.FIGHTER_TAKEDOWNS_LANDED + t3.FIGHTER_REVERSALS + 1)) AS UFCSTATS_IDK_LOL_DIFF,
  CASE t1.RED_OUTCOME WHEN 'W' THEN 1 WHEN 'L' THEN 0 ELSE NULL END AS RED_WIN 
FROM
  main.UFCSTATS_BOUTS_OVERALL AS t1
  INNER JOIN stacked_derived_features AS t2 ON t1.BOUT_ID = t2.BOUT_ID AND t1.RED_FIGHTER_ID = t2.FIGHTER_ID
  INNER JOIN stacked_derived_features AS t3 ON t1.BOUT_ID = t3.BOUT_ID AND t1.BLUE_FIGHTER_ID = t3.FIGHTER_ID
WHERE
  t2.FIGHTER_BOUT_NUMBER > 1
  AND t3.FIGHTER_BOUT_NUMBER > 1
  AND t1.DATE >= ?
ORDER BY
  t1.DATE,
  t1.EVENT_ID,
  t1.BOUT_ORDINAL;